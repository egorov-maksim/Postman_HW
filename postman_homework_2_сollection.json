{
	"info": {
		"_postman_id": "1542f7a8-134a-48ab-a394-80564800aad5",
		"name": "postman_homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "T1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first",
							"// 1. Отправить запрос.",
							"//http get request with no params",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"String in body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "T2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3",
							"// 1. Отправить запрос.",
							"//http request post method with 3 keys in body: name = str, age = int, salary = int",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json()",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Response name equals Maksim\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Maksim\");",
							"});",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.) D.t. age in response is string, convert to number",
							"pm.test(\"Response age equals 27\", function () {",
							"    pm.expect(+jsonData.age).to.eql(27);",
							"});",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Response salary equals 2000\", function () {",
							"    pm.expect(jsonData.salary).to.eql(2000);",
							"});",
							"// 7. Спарсить request.",
							"let request_data = request.data",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Request name equals response name\", function () {",
							"    pm.expect(jsonData.name).to.eql(request_data.name);",
							"});",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Request age equals response age\", function () {",
							"    pm.expect(jsonData.age).to.eql(request_data.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Request salary equals response salary\", function () {",
							"    pm.expect((jsonData.salary)).to.eql(+request_data.salary);",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(jsonData.family)",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Response salary after 1.5 years in json family equals request salary multiplied by 4\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request_data.salary*4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maksim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "T3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"response name = get request params name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"response age = get request params age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"response salary = get request params salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(jsonData.family)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Check if dog has a property name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check if dog has a property age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Dog name is Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Dog age is 4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Maksim&age=27&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maksim"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "T4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name from response the same as name from request\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Age from response the same as age from request\", function () {",
							"    pm.expect(jsonData.age).to.eql(+req.age);",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(req.salary)",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary)",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonData.salary[0])",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[2])",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Response salary equal to salary from requets\", function () {",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Response second salary equal to salary from requets multiplied by 2\", function () {",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Response second salary equal to salary from requets multiplied by 3\", function () {",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);",
							"});",
							"// 15. Создать в окружении переменную name",
							"pm.environment.set(\"name\");",
							"// 16. Создать в окружении переменную age",
							"pm.environment.set(\"age\");",
							"// 17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\");",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", req.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", req.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", req.salary);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"jsonData.salary.forEach(function(salary){",
							"       console.log(salary);",
							"   })",
							"   ///сomm. Each element of array (jsonData.salary in respones comes as array) become a variable salary",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Maksim&age=27&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maksim"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "T5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2",
							"// 1. Вставить параметр salary из окружения в request",
							"//{{salary}}",
							"// 2. Вставить параметр age из окружения в age",
							"//{{age}}",
							"// 3. Вставить параметр name из окружения в name",
							"//{{name}}",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"let jsonData = pm.response.json()",
							"// 7. Спарсить request.",
							"let requestData = request.data",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Response has parameter start_qa_salary\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Response has parameter qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Response has parameter qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Response has parameter qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Response has parameter qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Response has parameter person\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start_qa_salary in response equal request salary\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+requestData.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months in response equal request salary*2\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(requestData.salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months in response equal request salary*2.7\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(requestData.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year in response equal request salary*3.3\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(requestData.salary*3.3) ",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_year in response equal request salary*3.8\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(requestData.salary*3.8) ",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"salary in response equal to salary in request \", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+requestData.salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"age in response equal to age in request \", function () {",
							"    pm.expect(jsonData.person.u_age).to.eql(+requestData.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years in response equal to salary in request *4.2\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+requestData.salary*4.2);",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"Object.keys(jsonData.person).forEach(function(key) { ",
							"    console.log(key, jsonData.person[key])",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}